class BSTNode {
int info;
BSTNode left;
BSTNode right;
public BSTNode(int info) {
this.info = info;
this.left = null;
this.right = null;
}
public void insert(int value) {
if (value < info) {
if (left == null) {
left = new BSTNode(value);
} else {
left.insert(value);
}
} else if (value > info) {
if (right == null) {
right = new BSTNode(value);
} else {
right.insert(value);
}
}
}
}
public class Main {
public static void main(String[] args) {
BSTNode root = new BSTNode(10);
root.insert(5);
root.insert(15);
root.insert(3);
root.insert(8);
}
}
class BSTNode {
int info;
BSTNode left;
BSTNode right;
public BSTNode(int info) {
this.info = info;
this.left = null;
this.right = null;
}
public void insert(int value) {
if (value < info) {
if (left == null) {
left = new BSTNode(value);
} else {
left.insert(value);
}
} else if (value > info) {
if (right == null) {
right = new BSTNode(value);
} else {
right.insert(value);
}
}
}
public void preorderTraversal() {
System.out.print(info + " ");
if (left != null) {
left.preorderTraversal();
}
if (right != null) {
right.preorderTraversal();
}
}
public void inorderTraversal() {
if (left != null) {
left.inorderTraversal();
}
System.out.print(info + " ");
if (right != null) {
right.inorderTraversal();
}
}
public void postorderTraversal() {
if (left != null) {
left.postorderTraversal();
}
if (right != null) {
right.postorderTraversal();
}
System.out.print(info + " ");
}
}
public class Main {
public static void main(String[] args) {
BSTNode root = new BSTNode(10);
root.insert(5);
root.insert(15);
root.insert(3);
root.insert(8);
System.out.println("Pre-order traversal:");
root.preorderTraversal();
System.out.println("\nIn-order traversal:");
root.inorderTraversal();
System.out.println("\nPost-order traversal:");
root.postorderTraversal();
}
}
class Country {
String name;
int population;
public Country(String name, int population) {
this.name = name;
this.population = population;
}
public String toString() {
return "Country{" + "name='" + name + '\'' + ", population=" + population + '}';
}
}
class BNode {
Country info;
BNode left;
BNode right;
public BNode(Country info) {
this.info = info;
this.left = null;
this.right = null;
}
}
class BST {
BNode root;
public BST() {
this.root = null;
}
public void insert(Country country) {
root = insertRecursive(root, country);
}
private BNode insertRecursive(BNode root, Country country) {
if (root == null) {
root = new BNode(country);
return root;
}
if (country.name.compareTo(root.info.name) < 0) {
root.left = insertRecursive(root.left, country);
} else if (country.name.compareTo(root.info.name) > 0) {
root.right = insertRecursive(root.right, country);
}
return root;
}
}
public class Main {
public static void main(String[] args) {
BST bst = new BST();
bst.insert(new Country("USA", 328000000));
bst.insert(new Country("China", 1439323776));
bst.insert(new Country("India", 1380004385));
bst.insert(new Country("Brazil", 212559417));
bst.insert(new Country("Pakistan", 225199937));
System.out.println("Countries in sorted order:");
printInOrder(bst.root);
}
private static void printInOrder(BNode node) {
if (node != null) {
printInOrder(node.left);
System.out.println(node.info);
printInOrder(node.right);
}
}
}
import java.util.LinkedList;
import java.util.Queue;
class BST {
BNode root;
public BST() {
this.root = null;
}
public void insert(Country country) {
root = insertRecursive(root, country);
}
private BNode insertRecursive(BNode root, Country country) {
if (root == null) {
root = new BNode(country);
return root;
}
if (country.name.compareTo(root.info.name) < 0) {
root.left = insertRecursive(root.left, country);
} else if (country.name.compareTo(root.info.name) > 0) {
root.right = insertRecursive(root.right, country);
}
return root;
}
public void levelOrderTraversal() {
if (root == null) {
return;
}
Queue<BNode> queue = new LinkedList<>();
queue.add(root);
while (!queue.isEmpty()) {
BNode node = queue.poll();
System.out.println(node.info);
if (node.left != null) {
queue.add(node.left);
}
if (node.right != null) {
queue.add(node.right);
}
}
}
public Country findMaxPopulation() {
if (root == null) {
return null;
}
BNode current = root;
while (current.right != null) {
current = current.right;
}
return current.info;
}
public Country findMinPopulation() {
if (root == null) {
return null;
}
BNode current = root;
while (current.left != null) {
current = current.left;
}
return current.info;
}
}
public class Main {
public static void main(String[] args) {
BST bst = new BST();
bst.insert(new Country("USA", 328000000));
bst.insert(new Country("China", 1439323776));
bst.insert(new Country("India", 1380004385));
bst.insert(new Country("Brazil", 212559417));
bst.insert(new Country("Pakistan", 225199937));
System.out.println("Level Order Traversal:");
bst.levelOrderTraversal();
Country maxPopulationCountry = bst.findMaxPopulation();
System.out.println("\nCountry with maximum population:");
System.out.println(maxPopulationCountry);
Country minPopulationCountry = bst.findMinPopulation();
System.out.println("\nCountry with minimum population:");
System.out.println(minPopulationCountry);
}
}
class BST {
BNode root;
public BST() {
this.root = null;
}
public void createTree(int[] array) {
root = createTreeRecursive(array, 0, array.length - 1);
}
private BNode createTreeRecursive(int[] array, int start, int end) {
if (start > end) {
return null;
}
int mid = (start + end) / 2;
BNode newNode = new BNode(new Country(Integer.toString(array[mid]), array[mid]));
newNode.left = createTreeRecursive(array, start, mid - 1);
newNode.right = createTreeRecursive(array, mid + 1, end);
return newNode;
}
}
public class Main {
public static void main(String[] args) {
int[] sortedArray = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
BST bst = new BST();
bst.createTree(sortedArray);
System.out.println("Level Order Traversal:");
bst.levelOrderTraversal();
}
}
class BNode {
int data;
BNode left, right;
public BNode(int data) {
this.data = data;
left = right = null;
}
}
class BinaryTree {
BNode root;
public BinaryTree() {
root = null;
}
public boolean isBST() {
return isBSTUtil(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
}
private boolean isBSTUtil(BNode node, int min, int max) {
if (node == null)
return true;
if (node.data < min || node.data > max)
return false;
return (isBSTUtil(node.left, min, node.data - 1) &&
isBSTUtil(node.right, node.data + 1, max));
}
}
public class Main {
public static void main(String[] args) {
BinaryTree tree = new BinaryTree();
tree.root = new BNode(4);
tree.root.left = new BNode(2);
tree.root.right = new BNode(5);
tree.root.left.left = new BNode(1);
tree.root.left.right = new BNode(3);
if (tree.isBST())
System.out.println("The binary tree is a BST.");
else
System.out.println("The binary tree is not a BST.");
}
}
class BNode {
int data;
BNode left, right;
public BNode(int data) {
this.data = data;
left = right = null;
}
}
class BST {
BNode root;
public BST() {
root = null;
}
public void insert(int key) {
root = insertRec(root, key);
}
private BNode insertRec(BNode root, int key) {
if (root == null) {
root = new BNode(key);
return root;
}
if (key < root.data)
root.left = insertRec(root.left, key);
else if (key > root.data)
root.right = insertRec(root.right, key);
return root;
}
public void delete(int key) {
root = deleteRec(root, key);
}
private BNode deleteRec(BNode root, int key) {
if (root == null)
return root;
if (key < root.data)
root.left = deleteRec(root.left, key);
else if (key > root.data)
root.right = deleteRec(root.right, key);
else {
// Case 1 and Case 2: Node with only one child or no child
if (root.left == null)
return root.right;
else if (root.right == null)
return root.left;
// Case 3: Node with two children
root.data = minValue(root.right);
root.right = deleteRec(root.right, root.data);
}
return root;
}
private int minValue(BNode root) {
int minv = root.data;
while (root.left != null) {
minv = root.left.data;
root = root.left;
}
return minv;
}
public void inorder() {
inorderRec(root);
}
private void inorderRec(BNode root) {
if (root != null) {
inorderRec(root.left);
System.out.print(root.data + " ");
inorderRec(root.right);
}
}
}
public class Main {
public static void main(String[] args) {
BST bst = new BST();
bst.insert(50);
bst.insert(30);
bst.insert(20);
bst.insert(40);
bst.insert(70);
bst.insert(60);
bst.insert(80);
System.out.println("Inorder traversal of the BST:");
bst.inorder();
int key = 20;
bst.delete(key);
System.out.println("\n\nAfter deleting node with value " + key + ":");
bst.inorder();
key = 30;
bst.delete(key);
System.out.println("\n\nAfter deleting node with value " + key + ":");
bst.inorder();
}
}
import java.util.*;
class Graph {
private int V;
private LinkedList<Integer>[] adjList;
private int[][] adjMatrix;
public Graph(int V) {
this.V = V;
adjList = new LinkedList[V];
for (int i = 0; i < V; ++i)
adjList[i] = new LinkedList<>();
adjMatrix = new int[V][V];
}
public void addEdge(int v, int w) {
adjList[v].add(w);
adjMatrix[v][w] = 1;
}
public void displayAdjMatrix() {
System.out.println("Adjacency Matrix:");
for (int i = 0; i < V; ++i) {
for (int j = 0; j < V; ++j) {
System.out.print(adjMatrix[i][j] + " ");
}
System.out.println();
}
}
public void displayAdjList() {
System.out.println("Adjacency List:");
for (int i = 0; i < V; ++i) {
System.out.print("Vertex " + i + " : ");
for (Integer vertex : adjList[i]) {
System.out.print(vertex + " ");
}
System.out.println();
}
}
}
public class Main {
public static void main(String[] args) {
int V = 5;
Graph graph = new Graph(V);
graph.addEdge(0, 1);
graph.addEdge(0, 4);
graph.addEdge(1, 2);
graph.addEdge(1, 3);
graph.addEdge(1, 4);
graph.addEdge(2, 3);
graph.addEdge(3, 4);
graph.displayAdjMatrix();
System.out.println();
graph.displayAdjList();
}
}

class Graph {
private int V; private LinkedList<Integer>[] adjList;
public Graph(int V) {
this.V = V;
adjList = new LinkedList[V];
for (int i = 0; i < V; ++i)
adjList[i] = new LinkedList<>();
}
public void addEdge(int v, int w) {
adjList[v].add(w);
}
public void readGraph(Scanner scanner, int E) {
System.out.println("Enter edges in the format 'src dest':");
for (int i = 0; i < E; i++) {
int src = scanner.nextInt();
int dest = scanner.nextInt();
addEdge(src, dest);
}
}
public void DFS(int v, boolean[] visited) {
visited[v] = true;
System.out.print(v + " ");
for (Integer neighbor : adjList[v]) {
if (!visited[neighbor])
DFS(neighbor, visited);
}
}
public static void main(String[] args) {
Scanner scanner = new Scanner(System.in);
System.out.print("Enter the number of vertices: ");
int V = scanner.nextInt();
System.out.print("Enter the number of edges: ");
int E = scanner.nextInt();
Graph graph = new Graph(V);
graph.readGraph(scanner, E);
System.out.println("Depth-First Search (DFS) Traversal:");
boolean[] visited = new boolean[V];
graph.DFS(0, visited);
}
}

class Graph {
private int V;
private LinkedList<Integer>[] adjList;
public Graph(int V) {
this.V = V;
adjList = new LinkedList[V];
for (int i = 0; i < V; ++i)
adjList[i] = new LinkedList<>();
}
public void addEdge(int v, int w) {
adjList[v].add(w);
}
public void BFS(int start) {
boolean[] visited = new boolean[V];
ArrayDeque<Integer> queue = new ArrayDeque<>();
visited[start] = true;
queue.offer(start);
System.out.println("Breadth-First Search (BFS) Traversal:");
while (!queue.isEmpty()) {
int v = queue.poll();
System.out.print(v + " ");
for (Integer neighbor : adjList[v]) {
if (!visited[neighbor]) {
visited[neighbor] = true;
queue.offer(neighbor);
}
}
}
}
}
public class Main {
public static void main(String[] args) {
Graph graph = new Graph(6);
graph.addEdge(0, 1);
graph.addEdge(0, 2);
graph.addEdge(1, 3);
graph.addEdge(1, 4);
graph.addEdge(2, 4);
graph.addEdge(3, 4);
graph.addEdge(3, 5);
graph.addEdge(4, 5);
graph.BFS(0);
}
}